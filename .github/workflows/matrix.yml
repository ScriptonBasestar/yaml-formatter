name: Matrix Builds

on:
  workflow_call:
    inputs:
      strategy:
        description: 'Build strategy: full, minimal, or release'
        required: false
        type: string
        default: 'minimal'
      upload-artifacts:
        description: 'Whether to upload build artifacts'
        required: false
        type: boolean
        default: false

# This workflow provides comprehensive matrix builds for multiple environments

jobs:
  matrix-config:
    name: Matrix Configuration
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix configuration
        id: set-matrix
        run: |
          case "${{ inputs.strategy }}" in
            "full")
              # Full matrix for releases
              matrix='{"os":["ubuntu-latest","windows-latest","macos-latest"],"go-version":["1.20","1.21","1.22"],"include":[{"os":"ubuntu-latest","go-version":"1.21","coverage":true,"race":true,"benchmarks":true},{"os":"ubuntu-latest","go-version":"1.22","latest":true}]}'
              ;;
            "minimal")
              # Minimal matrix for PRs
              matrix='{"os":["ubuntu-latest","windows-latest"],"go-version":["1.21","1.22"],"include":[{"os":"ubuntu-latest","go-version":"1.21","coverage":true}]}'
              ;;
            "release")
              # Release matrix with all platforms
              matrix='{"os":["ubuntu-latest","windows-latest","macos-latest"],"go-version":["1.21","1.22"],"include":[{"os":"ubuntu-latest","go-version":"1.21","coverage":true,"race":true,"benchmarks":true,"artifacts":true},{"os":"windows-latest","go-version":"1.21","artifacts":true},{"os":"macos-latest","go-version":"1.21","artifacts":true}]}'
              ;;
            *)
              # Default to minimal
              matrix='{"os":["ubuntu-latest"],"go-version":["1.21"],"include":[{"os":"ubuntu-latest","go-version":"1.21","coverage":true}]}'
              ;;
          esac
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Strategy: ${{ inputs.strategy }}"
          echo "Matrix: $matrix"

  build-and-test:
    name: Build & Test (${{ matrix.os }}, Go ${{ matrix.go-version }})
    runs-on: ${{ matrix.os }}
    needs: matrix-config
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-config.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache dependencies (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Cache dependencies (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Verify dependencies
        run: |
          go mod download
          go mod verify

      - name: Build binary
        run: |
          go build -v -ldflags="-s -w" -o yaml-formatter${{ matrix.os == 'windows-latest' && '.exe' || '' }} .

      - name: Run unit tests
        run: |
          if [[ "${{ matrix.coverage }}" == "true" ]]; then
            go test -race -coverprofile=coverage.out -covermode=atomic ./...
          elif [[ "${{ matrix.race }}" == "true" ]]; then
            go test -race ./...
          else
            go test ./...
          fi

      - name: Run integration tests
        if: matrix.os == 'ubuntu-latest'
        run: |
          chmod +x ./scripts/parallel-test.sh
          ./scripts/parallel-test.sh -m integration

      - name: Run benchmarks
        if: matrix.benchmarks == true
        run: |
          go test -bench=. -benchmem -run=^$ ./... > benchmark-results-${{ matrix.os }}-${{ matrix.go-version }}.txt

      - name: Test binary execution
        run: |
          ./yaml-formatter${{ matrix.os == 'windows-latest' && '.exe' || '' }} --help
          echo "test: value" | ./yaml-formatter${{ matrix.os == 'windows-latest' && '.exe' || '' }} --validate

      - name: Upload coverage to Codecov
        if: matrix.coverage == true
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: matrix-${{ matrix.os }}-${{ matrix.go-version }}
          name: codecov-matrix-${{ matrix.os }}-${{ matrix.go-version }}

      - name: Upload benchmark results
        if: matrix.benchmarks == true
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results-${{ matrix.os }}-${{ matrix.go-version }}
          path: benchmark-results-${{ matrix.os }}-${{ matrix.go-version }}.txt
          retention-days: 7

      - name: Upload build artifacts
        if: matrix.artifacts == true || inputs.upload-artifacts
        uses: actions/upload-artifact@v3
        with:
          name: yaml-formatter-${{ matrix.os }}-${{ matrix.go-version }}
          path: yaml-formatter${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          retention-days: 30

  matrix-summary:
    name: Matrix Build Summary
    runs-on: ubuntu-latest
    needs: [matrix-config, build-and-test]
    if: always()
    steps:
      - name: Generate matrix summary
        run: |
          echo "## Matrix Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Strategy**: ${{ inputs.strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "**Upload Artifacts**: ${{ inputs.upload-artifacts }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Results:" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "✅ All matrix builds completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
            echo "❌ Some matrix builds failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Matrix builds completed with warnings" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Matrix Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo '${{ needs.matrix-config.outputs.matrix }}' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Impact:" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️  Cross-platform build verification completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Multiple Go versions tested for compatibility" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Performance benchmarks collected (where enabled)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Build artifacts generated (where enabled)" >> $GITHUB_STEP_SUMMARY