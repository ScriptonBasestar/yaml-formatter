name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: v1.54
  
jobs:
  # Job 1: Fast feedback with basic checks
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Shallow clone for speed

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify dependencies
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Format check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted:"
            gofmt -s -d .
            exit 1
          fi

      - name: Vet
        run: go vet ./...

  # Job 2: Unit tests with parallel execution
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks
    strategy:
      matrix:
        test-mode: [fast, coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-test
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-

      - name: Run unit tests (fast)
        if: matrix.test-mode == 'fast'
        run: |
          chmod +x ./scripts/parallel-test.sh
          ./scripts/parallel-test.sh -m unit --no-race

      - name: Run unit tests (with coverage)
        if: matrix.test-mode == 'coverage'
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./internal/...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        if: matrix.test-mode == 'coverage'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Archive coverage artifacts
        if: matrix.test-mode == 'coverage'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 7

  # Job 3: Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-integration
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-

      - name: Run integration tests
        run: |
          chmod +x ./scripts/parallel-test.sh
          ./scripts/parallel-test.sh -m integration -v

  # Job 4: End-to-end tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-e2e
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-

      - name: Build test binary
        run: go build -o yaml-formatter-test .

      - name: Run E2E tests
        run: |
          chmod +x ./scripts/parallel-test.sh
          ./scripts/parallel-test.sh -m e2e -v -t 900

      - name: Archive E2E artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-artifacts
          path: |
            yaml-formatter-test
            /tmp/yaml-formatter-e2e-*
          retention-days: 3

  # Job 5: Linting
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better linting

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=5m --config=.golangci.yml
          skip-cache: false
          skip-save-cache: false

  # Job 6: Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

  # Job 7: Build verification
  build-verification:
    name: Build Verification
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs: quick-checks
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.20', '1.21']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            go-version: '1.20'
          - os: macos-latest
            go-version: '1.20'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Build binary
        run: go build -v -o yaml-formatter${{ matrix.os == 'windows-latest' && '.exe' || '' }} .

      - name: Test binary execution
        run: ./yaml-formatter${{ matrix.os == 'windows-latest' && '.exe' || '' }} --help

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: yaml-formatter-${{ matrix.os }}-go${{ matrix.go-version }}
          path: yaml-formatter${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          retention-days: 1

  # Job 8: Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./internal/... > benchmark-results.txt
          go test -bench=. -benchmem -run=^$ ./testdata/... >> benchmark-results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.txt
          retention-days: 7

      - name: Comment benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const benchmarkResults = fs.readFileSync('benchmark-results.txt', 'utf8');
            
            const body = `## Benchmark Results ðŸ“Š
            
            \`\`\`
            ${benchmarkResults}
            \`\`\`
            
            _This comment was automatically generated by the CI pipeline._`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Job 9: Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quick-checks, unit-tests, integration-tests, e2e-tests, lint, security-scan, build-verification]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.quick-checks.result }}" != "success" ]]; then
            echo "Quick checks failed"
            exit 1
          fi
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "E2E tests failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Linting failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          if [[ "${{ needs.build-verification.result }}" != "success" ]]; then
            echo "Build verification failed"
            exit 1
          fi
          echo "All CI jobs completed successfully! ðŸŽ‰"

      - name: Post success status
        if: success()
        run: |
          echo "::notice::All CI checks passed successfully"