version: '3.8'

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge
  backend_network:
    driver: bridge

secrets:
  db_password:
    file: ./secrets/db_password.txt
  api_key:
    external: true

services:
  web:
    container_name: web_app
    image: nginx:alpine
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - PORT=3000
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web/static:/usr/share/nginx/html
      - ./web/config:/etc/nginx/conf.d
    networks:
      - app_network
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    depends_on:
      - api
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`localhost`)"

  api:
    image: node:18-alpine
    container_name: api_server
    build:
      context: ./api
      dockerfile: Dockerfile
    command: ["npm", "start"]
    working_dir: /app
    ports:
      - "3000:3000"
    volumes:
      - ./api:/app
      - /app/node_modules
    networks:
      - app_network
      - backend_network
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - REDIS_HOST=redis
    env_file:
      - .env.production
    secrets:
      - db_password
      - api_key
    depends_on:
      - db
      - redis
    restart: on-failure
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  db:
    image: postgres:15
    container_name: postgres_db
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend_network
    environment:
      - POSTGRES_DB=myapp
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d myapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    networks:
      - backend_network
    command: redis-server /etc/redis/redis.conf
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3